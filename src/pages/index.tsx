import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";
import { FormEvent, useEffect, useState } from "react";
import { Example } from "@prisma/client";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center  bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();
  const [content, setContent] = useState("");
  const {data: allTodo, status } = api.example.getAll.useQuery(
    { userId: sessionData?.user?.id }, 
    { enabled: sessionData?.user !== undefined });
  const ctx = api.useContext();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );
  const createTodo = api.example.create.useMutation({
    onSuccess: () => {
      setContent("");
      void ctx.example.getAll.invalidate({userId: sessionData?.user?.id});
    }
  });

  const deleteTodo = api.example.delete.useMutation({
    onSuccess: () => {
      void ctx.example.getAll.invalidate({userId: sessionData?.user?.id});
    }
  })

  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    createTodo.mutate({content: content, userId: sessionData?.user?.id as string});

  }

  const removeTodo = (id: string) => {
    deleteTodo.mutate({id: id});
  }

  return (
    <div className="flex flex-col items-center justify-center gap-4 text-white">
      <p className="text-center text-xl">
        {sessionData && <span>Logged in as User Name: {sessionData.user?.name} - Email: {sessionData.user?.email} - Role: {sessionData.user?.role}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      {(() => {
        if (sessionData != null) {
          return (
            <>
              <h4 className="text-4xl">Create new todo</h4>
              <form className="mt-1 space-y-2 w-1/2" onSubmit={(e) => handleSubmit(e)}>
                <div className=" shadow-sm -space-y-px">
                  <div>
                    <input
                      type="text"
                      required
                      value={content}
                      onChange={(e) => setContent(e.target.value)}
                      className="appearance-none rounded-none relative block
                      w-full px-3 py-2 border border-gray-300
                      placeholder-gray-500 text-gray-900
                      focus:outline-none focus:ring-indigo-500
                      focus:border-indigo-500 focus:z-10 sm:text-sm"
                      placeholder="What do you want to do?"
                    />
                  </div>
                </div>
                <div>
                  <button
                    type="submit"
                    className="group relative w-full flex justify-center
                    py-2 px-4 border border-transparent text-sm font-medium
                    rounded-md text-white bg-indigo-600 hover:bg-indigo-700
                    focus:outline-none focus:ring-2 focus:ring-offset-2
                    focus:ring-indigo-500"
                  >
                    <span className="absolute left-0 inset-y-0 flex items-center pl-3">
                      
                    </span>
                    Submit
                  </button>
                </div>
              </form>
              <h4 className="text-4xl">Your todo list:</h4>
            </>
            
          )
        }
      })()}
      
      {allTodo?.map(function(item, i){
        return <p className="text-lg" key={i}>{item.content} <span onClick={() => removeTodo(item.id)} className="text-red-400 cursor-pointer">x</span></p>
      })}
      {(() => {
        if (sessionData?.user.role == "admin") {
          return (
            <>
              <Link className="btn btn-primary text-white pt-5" href="/admin">
                Only admin can see this line. Click here go to admin page
              </Link>

              <Link className="btn btn-primary text-white" href="/role">
                Manage User Role
              </Link>
            </>
            
          )
        }
      })()}
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
  

  
};
